const axios = require("axios");
const prisma = require('../lib/prisma');

// Cache para tradu√ß√µes
const translationCache = new Map();
const CACHE_DURATION = 60 * 60 * 1000; // 1 hora

// Rate limiting para Gemini
let lastTranslationCall = 0;
const TRANSLATION_DELAY = 1000; // 1 segundo entre tradu√ß√µes (Gemini √© mais tolerante)

// Delay entre tradu√ß√µes para evitar rate limiting
async function delayTranslation() {
  const now = Date.now();
  const timeSinceLastCall = now - lastTranslationCall;
  
  if (timeSinceLastCall < TRANSLATION_DELAY) {
    const delay = TRANSLATION_DELAY - timeSinceLastCall;
    console.log(`‚è≥ Aguardando ${delay}ms para evitar rate limiting do Gemini...`);
    await new Promise(resolve => setTimeout(resolve, delay));
  }
  
  lastTranslationCall = Date.now();
}

// Translation using Gemini AI (replaces Bing)
const translation = async (text, sourceLang, targetLang) => {
  try {
    // Verifica cache primeiro
    const cacheKey = `${text}-${sourceLang}-${targetLang}`;
    const cached = translationCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
      console.log("üìã Usando tradu√ß√£o do cache");
      return cached.translation;
    }

    // Rate limiting
    await delayTranslation();

    const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
    
    if (!GEMINI_API_KEY) {
      console.error('‚ùå GEMINI_API_KEY n√£o configurada');
      return "Tradu√ß√£o indispon√≠vel - chave de API n√£o configurada";
    }

    // Mapeia c√≥digos de idioma para nomes completos
    const languageNames = {
      'en': 'ingl√™s',
      'pt': 'portugu√™s', 
      'es': 'espanhol',
      'fr': 'franc√™s',
      'de': 'alem√£o',
      'it': 'italiano'
    };

    const sourceLangName = languageNames[sourceLang] || sourceLang;
    const targetLangName = languageNames[targetLang] || targetLang;

    const prompt = `Traduza o seguinte texto do ${sourceLangName} para ${targetLangName}:

"${text}"

IMPORTANTE:
- Forne√ßa APENAS a tradu√ß√£o, sem explica√ß√µes
- Mantenha a formata√ß√£o original (quebras de linha, pontua√ß√£o)
- Se o texto cont√©m g√≠rias ou express√µes idiom√°ticas, traduza de forma natural
- Responda apenas com a tradu√ß√£o direta`;

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
      {
        contents: [{ parts: [{ text: prompt }] }]
      },
      { 
        headers: { 'Content-Type': 'application/json' },
        timeout: 30000
      }
    );

    const translatedText = response.data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim();
    
    if (!translatedText) {
      console.warn("Resposta vazia do Gemini para tradu√ß√£o");
      return "Tradu√ß√£o indispon√≠vel";
    }

    // Salva no cache
    translationCache.set(cacheKey, {
      translation: translatedText,
      timestamp: Date.now()
    });

    console.log(`‚úÖ Tradu√ß√£o gerada com Gemini: ${sourceLang} ‚Üí ${targetLang}`);
    return translatedText;
    
  } catch (err) {
    if (err.response?.status === 429) {
      console.warn("‚ö†Ô∏è Rate limit do Gemini atingido");
      return "Tradu√ß√£o temporariamente indispon√≠vel devido ao limite de requisi√ß√µes. Tente novamente em alguns minutos.";
    }
    console.error("Erro na tradu√ß√£o com Gemini:", err.message);
    return "Tradu√ß√£o indispon√≠vel";
  }
};

// Translate text between languages
const translateText = async (text, sourceLang, targetLang, userId) => {
  try {
    // Valida√ß√£o b√°sica
    if (!text || text.trim().length === 0) {
      return "Por favor, digite um texto para traduzir.";
    }

    if (text.length > 5000) {
      return "Texto muito longo. Por favor, use textos menores que 5000 caracteres.";
    }

    const translatedText = await translation(text, sourceLang, targetLang);
    
    // Registra a busca no hist√≥rico do usu√°rio (apenas se a tradu√ß√£o foi bem-sucedida)
    if (userId && translatedText && !translatedText.includes("indispon√≠vel")) {
      try {
        await prisma.search.create({
          data: {
            word: text,
            type: 'TRANSLATION',
            userId: userId
          }
        });
      } catch (dbError) {
        console.warn("Erro ao salvar no hist√≥rico:", dbError.message);
        // N√£o falha a tradu√ß√£o por causa do hist√≥rico
      }
    }

    return translatedText;
  } catch (err) {
    console.error("Erro ao traduzir texto:", err);
    return "N√£o foi poss√≠vel realizar a tradu√ß√£o. Tente novamente mais tarde.";
  }
};

module.exports = { translateText };
