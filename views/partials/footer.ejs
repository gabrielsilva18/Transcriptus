<!-- Bootstrap core JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.startbootstrap.com/sb-forms-latest.js"></script>

<% if (user) { %>
  <!-- Gemini Chat Floating Button and Chat Box -->
  <style>
    #gemini-float-btn {
      position: fixed;
      bottom: 32px;
      right: 32px;
      z-index: 9999;
      background: linear-gradient(135deg, #4285f4, #34a853);
      color: #fff;
      border: none;
      border-radius: 50%;
      width: 70px;
      height: 70px;
      font-size: 20px;
      box-shadow: 0 6px 20px rgba(66, 133, 244, 0.4);
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: 2px;
      animation: pulse 2s infinite;
    }
    
    #gemini-float-btn:hover { 
      background: linear-gradient(135deg, #3367d6, #2d8f47);
      transform: scale(1.1);
      box-shadow: 0 8px 25px rgba(66, 133, 244, 0.5);
    }
    
    .chat-label {
      font-size: 10px;
      font-weight: bold;
      text-shadow: 0 1px 2px rgba(0,0,0,0.3);
    }
    
    @keyframes pulse {
      0% { box-shadow: 0 6px 20px rgba(66, 133, 244, 0.4); }
      50% { box-shadow: 0 6px 20px rgba(66, 133, 244, 0.6), 0 0 0 10px rgba(66, 133, 244, 0.1); }
      100% { box-shadow: 0 6px 20px rgba(66, 133, 244, 0.4); }
    }
    #gemini-chat-box {
      display: none;
      position: fixed;
      bottom: 100px;
      right: 32px;
      width: 400px;
      max-height: 500px;
      background: #fff;
      border-radius: 12px;
      box-shadow: 0 2px 16px rgba(0,0,0,0.25);
      z-index: 9999;
      flex-direction: column;
      overflow: hidden;
      border: 1px solid #e0e0e0;
    }
    #gemini-chat-header {
      background: #4285f4;
      color: #fff;
      padding: 12px;
      font-weight: bold;
      font-size: 16px;
    }
    #gemini-chat-messages {
      padding: 12px;
      height: 320px;
      overflow-y: auto;
      font-size: 14px;
      background: #fafafa;
      line-height: 1.4;
    }
    .gemini-message {
      margin-bottom: 12px;
      padding: 8px;
      border-radius: 8px;
      word-wrap: break-word;
      white-space: pre-wrap;
    }
    .gemini-user-message {
      background-color: #e3f2fd;
      margin-left: 20px;
      border-left: 3px solid #2196f3;
    }
    .gemini-ai-message {
      background-color: #f5f5f5;
      margin-right: 20px;
      border-left: 3px solid #4caf50;
    }
    
    /* Responsividade para dispositivos m√≥veis */
    @media (max-width: 768px) {
      #gemini-chat-box {
        width: 90vw;
        right: 5vw;
        max-height: 60vh;
      }
      #gemini-chat-messages {
        height: 40vh;
      }
    }
    #gemini-chat-input-area {
      display: flex;
      border-top: 1px solid #e0e0e0;
      background: #fff;
    }
    #gemini-chat-input {
      flex: 1;
      border: none;
      padding: 10px;
      font-size: 14px;
      outline: none;
      background: #fff;
    }
    #gemini-chat-send {
      background: #4285f4;
      color: #fff;
      border: none;
      padding: 0 18px;
      cursor: pointer;
      font-size: 16px;
      transition: background 0.2s;
    }
    #gemini-chat-send:hover { background: #3367d6; }
  </style>

  <button id="gemini-float-btn" title="üí¨ Chat com IA - Tire suas d√∫vidas sobre ingl√™s com intelig√™ncia artificial">
    <i class="bi bi-robot"></i>
    <span class="chat-label">IA</span>
  </button>
  <div id="gemini-chat-box">
    <div id="gemini-chat-header">
      <i class="bi bi-robot me-2"></i>
      Assistente IA - D√∫vidas sobre Ingl√™s
    </div>
    <div id="gemini-chat-messages"></div>
    <div id="gemini-chat-input-area">
      <input id="gemini-chat-input" type="text" placeholder="Ex: Como usar 'have' e 'has'? Qual a diferen√ßa entre 'a' e 'an'?" autocomplete="off" />
      <button id="gemini-chat-send">Enviar</button>
    </div>
  </div>

  <script>
    const geminiBtn = document.getElementById('gemini-float-btn');
    const geminiBox = document.getElementById('gemini-chat-box');
    const geminiInput = document.getElementById('gemini-chat-input');
    const geminiSend = document.getElementById('gemini-chat-send');
    const geminiMsgs = document.getElementById('gemini-chat-messages');

    geminiBtn.onclick = () => {
      geminiBox.style.display = geminiBox.style.display === 'flex' ? 'none' : 'flex';
      if (geminiBox.style.display === 'flex') {
        geminiInput.focus();
        // Adicionar mensagem de boas-vindas se for a primeira vez
        if (geminiMsgs.children.length === 0) {
          appendMsg('Assistente IA', 'üëã Ol√°! Sou seu assistente de ingl√™s. Posso ajudar com:\n\n‚Ä¢ Gram√°tica e regras\n‚Ä¢ Pron√∫ncia e fon√©tica\n‚Ä¢ Tradu√ß√µes e significados\n‚Ä¢ Dicas de estudo\n\nComo posso ajud√°-lo hoje?');
        }
      }
    };

    function appendMsg(sender, text) {
      const msg = document.createElement('div');
      msg.className = 'gemini-message';
      
      if (sender === 'Voc√™') {
        msg.classList.add('gemini-user-message');
      } else {
        msg.classList.add('gemini-ai-message');
      }
      
      // Formatar texto da IA com quebras de linha e par√°grafos
      if (sender === 'Gemini' && text !== '<i>pensando...</i>') {
        const formattedText = formatAIText(text);
        msg.innerHTML = `<strong>${sender}:</strong><br><div style="margin-top: 4px; line-height: 1.5;">${formattedText}</div>`;
      } else {
        msg.innerHTML = `<strong>${sender}:</strong> ${text}`;
      }
      
      geminiMsgs.appendChild(msg);
      geminiMsgs.scrollTop = geminiMsgs.scrollHeight;
    }

    function formatAIText(text) {
      // Primeiro, preservar quebras de linha originais
      let formatted = text
        .replace(/\n\n/g, '<br><br>') // Par√°grafos duplos
        .replace(/\n/g, '<br>'); // Quebras de linha simples
      
      // Adicionar quebras ap√≥s pontua√ß√£o para melhor legibilidade
      formatted = formatted
        .replace(/\. /g, '.<br>') // Quebras ap√≥s pontos
        .replace(/\: /g, ':<br>') // Quebras ap√≥s dois pontos
        .replace(/\? /g, '?<br>') // Quebras ap√≥s interroga√ß√µes
        .replace(/\! /g, '!<br>'); // Quebras ap√≥s exclama√ß√µes
      
      // Formatar listas numeradas
      formatted = formatted.replace(/(\d+\.\s)/g, '<br>$1');
      
      // Formatar listas com bullets
      formatted = formatted.replace(/([-‚Ä¢]\s)/g, '<br>$1');
      
      // Formatar t√≠tulos (texto em mai√∫sculas seguido de dois pontos)
      formatted = formatted.replace(/([A-Z√Å√Ä√Ç√É√â√ä√ç√ì√î√ï√ö√á\s]+):/g, '<br><strong>$1:</strong>');
      
      // Limpar quebras duplas desnecess√°rias
      formatted = formatted.replace(/<br><br><br>/g, '<br><br>');
      
      // Remover quebras no in√≠cio
      formatted = formatted.replace(/^<br>/, '');
      
      return formatted;
    }

    async function sendToGemini(question) {
      appendMsg('Voc√™', question);
      appendMsg('Gemini', '<i>pensando...</i>');
      try {
        const res = await fetch('/api/gemini', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ prompt: question })
        });
        const data = await res.json();
        geminiMsgs.lastChild.remove();
        if (data && data.text) {
          appendMsg('Gemini', data.text);
        } else {
          appendMsg('Gemini', 'Desculpe, n√£o consegui responder agora.');
        }
      } catch (e) {
        geminiMsgs.lastChild.remove();
        appendMsg('Gemini', 'Erro ao conectar ao servidor.');
      }
    }

    function handleSend() {
      const question = geminiInput.value.trim();
      if (!question) return;
      geminiInput.value = '';
      sendToGemini(question);
    }

    geminiSend.onclick = handleSend;
    geminiInput.addEventListener('keydown', e => {
      if (e.key === 'Enter') handleSend();
    });
  </script>
<% } %>
